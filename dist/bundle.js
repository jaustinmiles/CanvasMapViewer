(()=>{"use strict";function t(t,e,r){const o=t.getBoundingClientRect();return{x:e=(e-o.left-t.width/2)/(t.width/2),y:r=(t.height/2-(r-o.top))/(t.height/2)}}function e(t){const e=new Float32Array(3*t.length);for(let r=0;r<t.length;r++)e[3*r]=t[r][0],e[3*r+1]=t[r][1],e[3*r+2]=t[r][2];return e}function r(t,e){return{x:t.x+e.x,y:t.y+e.y}}function o(t,e){return{x:t.x-e.x,y:t.y-e.y}}let n=0,i=0;var s,a;!function(t){t.u_Sampler="u_Sampler",t.u_Transform="u_Transform"}(s||(s={})),function(t){t.a_Position="a_Position",t.a_TexCoord="a_TexCoord"}(a||(a={}));function l(e,n){const i=u(n,"#version 100\n\nattribute vec4 a_Position;\nattribute vec2 a_TexCoord;\nuniform mat4 u_Transform;\nvarying vec2 v_TexCoord;\nvoid main() {\n    gl_Position = u_Transform * a_Position;\n    v_TexCoord = a_TexCoord;\n}","#version 100\n\nprecision mediump float;\nuniform sampler2D u_Sampler;\nvarying vec2 v_TexCoord;\nvoid main() {\n    gl_FragColor = texture2D(u_Sampler, v_TexCoord);\n}");return null==i?(console.log("failed to initialize shaders"),null):new class{constructor(t,e){this.textures=new Array,this.dirty=!1,this.transform=new Float32Array,this.texIndex=0,this.attributes={a_Position:-1,a_TexCoord:-1},this.uniforms={u_Sampler:null,u_Transform:null},this.coords=new Float32Array([-1,1,0,1,-1,-1,0,0,1,1,1,1,1,-1,1,0]),this.n=4,this.buffer=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this.buffer),t.bufferData(t.ARRAY_BUFFER,this.coords,t.STATIC_DRAW);const r=this.coords.BYTES_PER_ELEMENT;this.attributes.a_Position=t.getAttribLocation(e,a.a_Position),this.attributes.a_TexCoord=t.getAttribLocation(e,a.a_TexCoord),this.uniforms.u_Transform=t.getUniformLocation(e,s.u_Transform),this.uniforms.u_Sampler=t.getUniformLocation(e,s.u_Sampler),console.log(this.attributes),t.vertexAttribPointer(this.attributes.a_Position,2,t.FLOAT,!1,4*r,0),t.enableVertexAttribArray(this.attributes.a_Position),t.vertexAttribPointer(this.attributes.a_TexCoord,2,t.FLOAT,!1,4*r,2*r),t.enableVertexAttribArray(this.attributes.a_TexCoord),this.textures.push(...this.initTextures(t,e)),this.program=e}initTextures(t,e){const r=t.createTexture(),o=t.createTexture();if(null==r||null==o)return console.log("Couldn't create webgl texture"),[];console.log(this.uniforms);const n=new Image;n.onload=()=>this.loadTexture(t,r,n,t.TEXTURE0,0),n.src="./images/map.jpg";const i=new Image;return i.onload=()=>this.loadTexture(t,o,i,t.TEXTURE1,1),i.src="./images/map2.jpg",[r,o]}swapTextures(t,e){this.texIndex=e,t.useProgram(this.program)}loadTexture(t,e,r,o,n){t.useProgram(this.program),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,1),t.activeTexture(o),t.bindTexture(t.TEXTURE_2D,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_2D,0,t.RGB,t.RGB,t.UNSIGNED_BYTE,r),t.uniform1i(this.uniforms.u_Sampler,n),t.drawArrays(t.TRIANGLE_STRIP,0,this.n),console.log("loaded")}draw(t,e){t.useProgram(this.program),t.uniformMatrix4fv(this.uniforms.u_Transform,!1,e),t.bindBuffer(t.ARRAY_BUFFER,this.buffer),this.dirty&&t.bufferData(t.ARRAY_BUFFER,this.coords,t.STATIC_DRAW),t.bindTexture(t.TEXTURE_2D,this.textures[this.texIndex]);const r=this.coords.BYTES_PER_ELEMENT;t.vertexAttribPointer(this.attributes.a_Position,2,t.FLOAT,!1,4*r,0),t.enableVertexAttribArray(this.attributes.a_Position),t.vertexAttribPointer(this.attributes.a_TexCoord,2,t.FLOAT,!1,4*r,2*r),t.enableVertexAttribArray(this.attributes.a_TexCoord),t.drawArrays(t.TRIANGLE_STRIP,0,this.n)}dilate(e,n,i,s){let a=t(e,n,i);for(let t=0;t<this.coords.length;t++){console.log(this.coords.length),console.log(t);let e={x:this.coords[4*t],y:this.coords[4*t+1]};e=o(e,a),e.x*=s,e.y*=s,e=r(e,a),this.coords[4*t]=e.x,this.coords[4*t+1]=e.y}console.log(this.coords),this.dirty=!0}}(n,i)}function u(t,e,r){const o=function(t,e,r){const o=c(t,t.VERTEX_SHADER,e),n=c(t,t.FRAGMENT_SHADER,r);if(!o||!n)return null;const i=t.createProgram();if(!i)return null;if(t.attachShader(i,o),t.attachShader(i,n),t.linkProgram(i),!t.getProgramParameter(i,t.LINK_STATUS)){const e=t.getProgramInfoLog(i);return console.log("Failed to link program, reason: "+e),t.deleteProgram(i),t.deleteShader(n),t.deleteShader(o),null}return i}(t,e,r);return o?(t.useProgram(o),o):(console.log("Failed to create program"),null)}function c(t,e,r){const o=t.createShader(e);if(null==o)return console.log("failed to create shader"),null;if(t.shaderSource(o,r),t.compileShader(o),!t.getShaderParameter(o,t.COMPILE_STATUS)){const e=t.getShaderInfoLog(o);return console.log("Failed to compile shader, reason: "+e),t.deleteShader(o),null}return o}!function(){const s=document.createElement("canvas");s.height=window.innerHeight,s.width=window.innerWidth,document.body.appendChild(s);const a=s.getContext("webgl");if(!a)return void console.log("no webgl context available");a.clearColor(0,0,0,1),a.clear(a.COLOR_BUFFER_BIT);const c=l(0,a),h=function(n,i){const s=u(i,"attribute vec4 a_Position;\nattribute float a_PointSize;\nuniform mat4 u_Transform;\nvoid main() {\n    gl_Position = u_Transform * a_Position;\n    gl_PointSize = a_PointSize;\n}","precision mediump float;\n\nuniform vec4 u_FragColor;\nvoid main() {\n    gl_FragColor = u_FragColor;\n}");if(null==s)return console.log("failed to initialize shaders"),null;const a=new class{constructor(t){this.transform=new Float32Array,this.dirty=!1,this.gl_Points=new Array,this.gl_Colors=new Array,this.shapeIndices=new Array,this.shapeIndices.push(0),this.shapeIndices.push(0),this.angle=0,this.translation={x:0,y:0},this.translationScale=.005,this.attributes={a_Position:-1,u_FragColor:null,a_PointSize:-1},this.program=t,this.vertexBuffer=null}click(e,r,o){let n=e.clientX,i=e.clientY,s=t(o,n,i);s=this.getInv(s),this.gl_Points.push(new Array(...[s.x,s.y,0]));const a=Math.sqrt(n*n+i*i);this.gl_Colors.push(new Array(...[a,1-a,a,1])),this.renderBuffer(r)}renderBuffer(t){t.useProgram(this.program),this.dirty&&this.setTransformUniform(t,this.program),t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.vertexAttribPointer(this.attributes.a_Position,3,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.attributes.a_Position),t.lineWidth(5),this.setBuffer(t);const e=this.shapeIndices;for(let r=1;r<e.length;r++)t.drawArrays(t.LINE_STRIP,e[r-1],e[r]-e[r-1])}setBuffer(t){t.bufferData(t.ARRAY_BUFFER,e(this.gl_Points),t.STATIC_DRAW)}transformAndRender(t,e){this.setTransformUniform(t,e),this.renderBuffer(t)}setTransformUniform(t,e){const r=t.getUniformLocation(e,"u_Transform");if(null==r)return void console.log("Couldn't set uniforms for transformations");const o=Math.sin(this.angle),n=Math.cos(this.angle);this.transform=new Float32Array([n,o,0,0,-o,n,0,0,0,0,1,0,this.translation.x,this.translation.y,0,1]),t.uniformMatrix4fv(r,!1,this.transform)}getInv(t){const e=Math.sin(-this.angle),r=Math.cos(-this.angle);return function(t,e){return{x:t[0]*e.x+t[4]*e.y+t[12],y:t[1]*e.x+t[5]*e.y+t[13]}}(new Float32Array([r,e,0,0,-e,r,0,0,0,0,1,0,-this.translation.x,-this.translation.y,0,1]),t)}dilate(e,n,i,s){let a=t(e,n,i),l=this.gl_Points;a=o(a,this.translation);for(let t=0;t<l.length;t++){let e=l[t],n={x:e[0],y:e[1]};n=o(n,a),n.x*=s,n.y*=s,n=r(n,a),l[t][0]=n.x,l[t][1]=n.y}}initVertexBuffers(t,r){const o=this.gl_Points.length/2;return this.vertexBuffer=t.createBuffer(),this.vertexBuffer?(t.bindBuffer(t.ARRAY_BUFFER,this.vertexBuffer),t.bufferData(t.ARRAY_BUFFER,e(this.gl_Points),t.STATIC_DRAW),this.attributes.a_Position=t.getAttribLocation(r,"a_Position"),t.vertexAttribPointer(this.attributes.a_Position,3,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.attributes.a_Position),o):(console.log("failed to create buffer"),-1)}}(s),l=i.getAttribLocation(s,"a_Position");if(l<0)return console.log("failed to get the storage location of a_Position"),null;const c=i.getAttribLocation(s,"a_PointSize");if(c<0)return console.log("failed to get the storage location of a_PointSize"),null;const h=i.getUniformLocation(s,"u_FragColor");if(null==h)return console.log("failed to get uniform u_fragColor"),null;a.attributes.a_Position=l,a.attributes.u_FragColor=h,a.attributes.a_PointSize=c,i.vertexAttrib1f(c,20),a.setTransformUniform(i,s);const f=a.initVertexBuffers(i,s);return i.drawArrays(i.POINTS,0,f),a}(0,a);if(null==c||null==h)return void console.log("failed to initialize objects");!function(t,e,o,s){function a(t,e,r){o.angle+=r,o.transformAndRender(t,e)}t.onmousedown=r=>{0==r.button?(n++,o.click(r,e,t)):2==r.button&&i++},window.oncontextmenu=t=>(t.preventDefault(),!1),t.onmouseup=t=>{0==t.button?(o.shapeIndices.push(o.gl_Points.length),n--):2==t.button&&i--},t.onmousemove=s=>{const a=o.shapeIndices;if(n>0)o.click(s,e,t),a[a.length-1]=o.gl_Points.length;else if(i>0){const t=s.movementX,n=s.movementY;o.translation=r(o.translation,{x:t*o.translationScale,y:-n*o.translationScale}),o.transformAndRender(e,o.program)}},window.onkeydown=t=>{switch(console.log(t.code),t.code){case"KeyQ":a(e,o.program,.1);break;case"KeyE":a(e,o.program,-.1);break;case"Digit1":s.swapTextures(e,0);break;case"Digit2":s.swapTextures(e,1)}},t.onwheel=r=>{const n=r.deltaY<0?1.1:.9;o.dilate(t,r.clientX,r.clientY,n),s.dilate(t,r.clientX,r.clientY,n),o.renderBuffer(e)}}(s,a,h,c);const f=()=>{a.clear(a.COLOR_BUFFER_BIT),null==c||c.draw(a,h.transform),null==h||h.renderBuffer(a),requestAnimationFrame(f)};f()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,